load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@rules_python//gazelle/manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")
load("@pip//:requirements.bzl", "all_whl_requirements")

# Gazelle Python extension metadata for Python packages we
# depend on. That data is required for the gazelle_python_manifest
# rule to update our manifest file.
# To see what this rule does, try `bazel run @modules_map//:print`
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# Gazelle Python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",  # above
    # This is what we called our `pip_install` rule, where third-party
    # python libraries are loaded in BUILD files.
    pip_deps_repository_name = "pip",
    # This should point to wherever we declare our python dependencies
    # (the same as what we passed to the modules_mapping rule in WORKSPACE)
    requirements = ":requirements.txt",
)

py_library(
    name = "app",
    srcs = ["__init__.py"],
    imports = [".."],
    visibility = ["//:__subpackages__"],
)

# gazelle:ignore 4600c9e2-8139-11ec-b195-acde48001122

py_binary(
    name = "app_bin",
    srcs = ["__main__.py"],
    imports = [".."],
    main = "__main__.py",
    visibility = ["//:__subpackages__"],
    deps = [
        ":app",
        "//app/superhero",
    ],
)
