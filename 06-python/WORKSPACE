workspace(
    name = "python_example",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# ----------------- Gazelle support -------------------

# Depend on Go because Gazelle is written in Go and we compile
# from source in this example. Possibly in the future rules_python
# could include precompiled Gazelle binaries?

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "69de5c704a05ff37862f7e0f5534d4f479418afc21806c887db544a316f3cb6b",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "0bb8056ab9ed4cbcab5b74348d8530c0e0b939987b0cfe36c1ab53d35a99e4de",
    strip_prefix = "bazel-gazelle-2834ea44b3ec6371c924baaf28704730ec9d4559",
    urls = [
        # No release since March, and we need subsequent fixes
        "https://github.com/bazelbuild/bazel-gazelle/archive/2834ea44b3ec6371c924baaf28704730ec9d4559.zip",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(version = "1.17.4")

gazelle_dependencies()

# ------

# Python support

# We're using the very latest, not-yet-released rules_python as of
# late November 2021, because it has a freshly-added Gazelle plugin.
# This new capability potentially makes adoption far more appealing.

http_archive(
    name = "rules_python",
    sha256 = "56b373d6d63d01977fb7bb341170fc354ae923c532ae8744b15db0cfda4bf5a7",
    strip_prefix = "rules_python-a5a7ffbf4bd9a5bd611942e94d9c9787bf0cbcdd",
    url = "https://github.com/bazelbuild/rules_python/archive/a5a7ffbf4bd9a5bd611942e94d9c9787bf0cbcdd.zip",
)

load("@rules_python//python:pip.bzl", "pip_install")

# There are several competing tools for dependency resolution in
# Python. rules_python has chosen to support pip, the most common.

# requirements.txt = list of needed packages
# requirements-lock.txt = transitive closure

# python -m pip install pip-tools
# pip-compile --generate-hashes --output-file=requirements_lock.txt requirements.txt

# Then, Gazelle Python support requires that gazelle_python_manifest
# be populated using this command:

# bazel run //app:gazelle_python_manifest.update

# Finally, this updates/creates the BUILD.bazel files:
# bazel run //:gazelle

# Run pip, create Bazel targets for the packages therein.

# "By default, pip_install uses the system command "python3". This can
# be overridden by passing the python_interpreter attribute or
# python_interpreter_target attribute to pip_install."

pip_install(
    name = "pip",  # Which is also the default. You can have more than one.
    requirements = "//app:requirements_lock.txt",
)

# The rules_python gazelle extension has some third-party go dependencies
# which we need to fetch in order to compile it.
load("@rules_python//gazelle:deps.bzl", _py_gazelle_deps = "gazelle_deps")

_py_gazelle_deps()

load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")

# This repository rule fetches the metadata for python packages we
# depend on. That data is required for the gazelle_python_manifest
# rule to update our manifest file.
# To see what this rule does, try `bazel run @modules_map//:print`
modules_mapping(
    name = "modules_map",
    requirements = "//app:requirements_lock.txt",
)
