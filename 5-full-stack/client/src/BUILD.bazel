load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("@npm//@angular/bazel:index.bzl", "ng_module")
load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_devserver")

package(default_visibility = ["//:__subpackages__"])

ts_config(
    name = "tsconfig-test",
    src = "tsconfig-test.json",
    deps = [":tsconfig.json"],
)

# This is an Angularism: generated ngfactory code will import from places
# the source code did not.
NG_FACTORY_ADDED_IMPORTS = [
    "@npm//@angular/forms",
]

ng_module(
    name = "src",
    srcs = [
        "main.dev.ts",
    ],
    tsconfig = ":tsconfig.json",
    deps = NG_FACTORY_ADDED_IMPORTS + [
        "//client/src/app",
        "@npm//@angular/core",
        "@npm//@angular/common",
        "@npm//@angular/platform-browser",
        "@npm//@angular/router",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

_ASSETS = [
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(location //client/src:index-template.html)",
        "--roots=. $(RULEDIR)",
        "--out=$@",
        "--assets",
        # Python-like list comprehensions work in Starlark:
    ] + ["$(location %s)" % s for s in _ASSETS] + [
        # Server by ts_devserver:
        "_/ts_scripts.js",
    ],
    data = ["//client/src:index-template.html"] + _ASSETS,
)

ts_devserver(
    name = "devserver",
    additional_root_paths = ["src"],
    entry_module = "full_stack_suite/client/src/main.dev",
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
    ],
    static_files = _ASSETS + [
        ":inject_scripts_for_dev",
    ],
    deps = [":src"],
)
