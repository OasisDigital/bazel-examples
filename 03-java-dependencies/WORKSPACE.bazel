workspace(name = "java_dependencies")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_jar")

# Retrieve a dependency JAR in the simplest available way. We'll see
# more complex mechanisms later.

http_jar(
    name = "guava",
    sha256 = "d5be94d65e87bd219fb3193ad1517baa55a3b88fc91d21cf735826ab5af087b9",
    urls = ["https://repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar"],
)

# Official Bazel tools to get Maven repo dependencies; there are other
# unofficial tools also.

RULES_JVM_EXTERNAL_TAG = "4.1"

RULES_JVM_EXTERNAL_SHA = "f36441aa876c4f6427bfb2d1f2d723b48e9d930b62662bf723ddfb8fc80f0140"

http_archive(
    name = "rules_jvm_external",
    sha256 = RULES_JVM_EXTERNAL_SHA,
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
)

load("@rules_jvm_external//:defs.bzl", "maven_install")

maven_install(
    artifacts = [
        "junit:junit:4.13.2",
        "com.sparkjava:spark-core:2.9.3",
    ],
    maven_install_json = "//:maven_install.json",
    repositories = [
        "https://jcenter.bintray.com/",
        "https://repo1.maven.org/maven2",
    ],
)

# Pinning is both safer (like an NPM package-lock) and avoids
# the spurious use of an OS-installed JVM.

load("@maven//:defs.bzl", "pinned_maven_install")

pinned_maven_install(
    # name = "maven",
)

# Initial pin:
# bazel run @maven//:pin

# Update or fill in incomplete pins
# bazel run @unpinned_maven//:pin

# <groupId>com.google.guava</groupId>
# <artifactId>guava</artifactId>
# <version>28.1-jre</version>
