workspace(
    name = "sprawling_suite",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Protocol buffers compiler (for GRPC)

http_archive(
    name = "rules_proto",
    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
    strip_prefix = "rules_proto-4.0.0",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
    ],
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

# GRPC for Java

http_archive(
    name = "io_grpc_grpc_java",
    sha256 = "e3781bcab2a410a7cd138f13b2e6a643e111575f6811b154c570f4d020e87507",
    strip_prefix = "grpc-java-1.44.0",
    urls = [
        "https://github.com/grpc/grpc-java/archive/refs/tags/v1.44.0.tar.gz",
    ],
)

load("@io_grpc_grpc_java//:repositories.bzl", "IO_GRPC_GRPC_JAVA_ARTIFACTS", "IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS", "grpc_java_repositories")

# Official Bazel tools to get Maven repo dependencies; there are other
# unofficial tools also.

RULES_JVM_EXTERNAL_TAG = "4.2"

RULES_JVM_EXTERNAL_SHA = "cd1a77b7b02e8e008439ca76fd34f5b07aecb8c752961f9640dea15e9e5ba1ca"

http_archive(
    name = "rules_jvm_external",
    sha256 = RULES_JVM_EXTERNAL_SHA,
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
)

load("@rules_jvm_external//:defs.bzl", "maven_install")

# List of 32 dependencies for GRPC support:
# print(IO_GRPC_GRPC_JAVA_ARTIFACTS)

maven_install(
    artifacts = [
        "junit:junit:4.12",
        "com.sparkjava:spark-core:2.9.3",
    ] + IO_GRPC_GRPC_JAVA_ARTIFACTS,
    generate_compat_repositories = True,
    maven_install_json = "//:maven_install.json",
    override_targets = IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS,
    repositories = [
        "https://jcenter.bintray.com/",
        "https://repo1.maven.org/maven2",
    ],
)

# Generate repositories with older naming, compatible with (needed
# for) the GRPC support

load("@maven//:compat.bzl", "compat_repositories")

compat_repositories()

# Pinning is both safer (like an NPM package-lock) and avoids
# the spurious use of an OS-installed JVM.

load("@maven//:defs.bzl", "pinned_maven_install")

pinned_maven_install()

# bazel run @maven//:pin
# bazel run @unpinned_maven//:pin

# GRPC for Java - continued
# Having used Maven to fetch its dependencies, we can now finish with GRPC for Java.

grpc_java_repositories()

# Go rules

# Go dependency management, Bazel Go support, and IDE Go support are
# still evolving. For now, use go.mod/go.sum along with the dependency
# loading here.

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "d6b2513456fe2229811da7eb67a444be7785f5323c6708b38d851d2b51e54d83",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.30.0/rules_go-v0.30.0.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.30.0/rules_go-v0.30.0.zip",
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(version = "1.17.6")

http_archive(
    name = "bazel_gazelle",
    sha256 = "de69a09dc70417580aabf20a28619bb3ef60d038470c7cf8442fafcf627c21cb",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.24.0/bazel-gazelle-v0.24.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.24.0/bazel-gazelle-v0.24.0.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")

gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

# Other Go Dependencies

# tip:
# bazel run //:gazelle -- update-repos github.com/mattn/go-slim

go_repository(
    name = "com_github_mattn_go_slim",
    importpath = "github.com/mattn/go-slim",
    sum = "h1:uGl3sfBzC84yAbUIqBCMIKLNLQrOnKvYSdRnM02okaY=",
    version = "v0.0.2",
)

# Javascript / Typescript tooling

http_archive(
    name = "build_bazel_rules_nodejs",
    sha256 = "a09edc4ba3931a856a5ac6836f248c302d55055d35d36e390a0549799c33145b",
    urls = ["https://github.com/bazelbuild/rules_nodejs/releases/download/5.0.2/rules_nodejs-5.0.2.tar.gz"],
)

load("@build_bazel_rules_nodejs//:repositories.bzl", "build_bazel_rules_nodejs_dependencies")

build_bazel_rules_nodejs_dependencies()

load("@rules_nodejs//nodejs:repositories.bzl", "nodejs_register_toolchains")

nodejs_register_toolchains(
    name = "nodejs",  # You can load another version under another name
    node_version = "16.13.2",
)

# It is also possible to set up the various things
# nodejs_register_toolchains separately, which lets you do things like
# set a Yarn version.

# build_bazel_rules_nodejs comes with bazel_skylib

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@build_bazel_rules_nodejs//:index.bzl", "yarn_install")

yarn_install(
    name = "npm",
    # This is required to allow rules to reach inside packages and
    # depend on arbitrary files. It is needed for ts_library,
    # ng_module, and many other cases.
    exports_directories_only = False,
    package_json = "//:package.json",
    yarn_lock = "//:yarn.lock",
)

# Multi-run rool initially developed by Bazel build team at Atlassian,
# later moved out of Atlassian's namespace.

http_archive(
    name = "com_github_ash2k_bazel_tools",
    sha256 = "a7672b62441d56c84abad6d9dc6fac324859b1dc0e90b0652cbcbf5bb0d861e2",
    strip_prefix = "bazel-tools-0.0.1",
    url = "https://github.com/ash2k/bazel-tools/releases/download/v0.0.1/bazel-tools-0.0.1.tar.gz",
)

load("@com_github_ash2k_bazel_tools//multirun:deps.bzl", "multirun_dependencies")

multirun_dependencies()

# C/C++/etc GRPC support

http_archive(
    name = "com_github_grpc_grpc",
    strip_prefix = "grpc-1.43.2",
    urls = [
        "https://github.com/grpc/grpc/archive/refs/tags/v1.43.2.tar.gz",
    ],
)

load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")

grpc_deps()

# Not mentioned in official docs... mentioned here https://github.com/grpc/grpc/issues/20511
load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")

grpc_extra_deps()

# Container support

# "These rules do not require / use Docker for pulling, building, or
# pushing images". No root, less janky. 100% reproducible, to the
# extent your built code is.

http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "4349f2b0b45c860dd2ffe18802e9f79183806af93ce5921fb12cbd6c07ab69a8",
    strip_prefix = "rules_docker-0.21.0",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.21.0/rules_docker-v0.21.0.tar.gz"],
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

container_repositories()

load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")

container_deps()

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_pull",
)

# Example of selecting a base image:

container_pull(
    name = "official_ubuntu",
    registry = "index.docker.io",
    repository = "library/ubuntu",
    tag = "14.04",
)

# By default the lang_image rules use the distroless base runtime
# images, so you don't need to select and container_pull one.

# "use of these rules on Windows is currently not supported."

load(
    "@io_bazel_rules_docker//go:image.bzl",
    _go_image_repos = "repositories",
)

# _go_image_repos() breaks on Windows, even if you use
# target_compatible_with on the targets.
